import os
import json
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
import requests
from dotenv import load_dotenv
from typing import List

load_dotenv()

# Initialize Slack client
slack_token = os.environ.get("SLACK_API")
slack_client = WebClient(token=slack_token)

# Initialize Gemini client
api_key = os.environ.get("GEMINI_API_KEY")
url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key={api_key}"

# Fetch Slack channel messages
def fetch_slack_conversation(channel_id: str) -> List[str]:
    try:
        result = slack_client.conversations_history(channel=channel_id)
        messages = result["messages"]
        return [msg['text'] for msg in messages if 'text' in msg]
    except SlackApiError as e:
        print(f"Error fetching Slack messages: {e.response['error']}")
        return []

def get_all_channels() -> List[dict]:
    """Fetches all channels from Slack with pagination support."""
    try:
        all_channels = []
        next_cursor = None

        print("Searching for the channel...")
        while True:
            response = slack_client.conversations_list(
                limit=1000, cursor=next_cursor
            )
            channels = response["channels"]
            all_channels.extend(channels)

            # Check if there's a next page
            next_cursor = response["response_metadata"].get("next_cursor", None)
            if not next_cursor:
                break

        return all_channels
    except SlackApiError as e:
        print(f"Error fetching channels: {e.response['error']}")
        return []
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        return []

def get_channel_id_by_name(channel_name: str) -> str:
    """Fetches the ID of a channel by name."""
    try:
        all_channels = get_all_channels()
        for channel in all_channels:
            if channel["name"] == channel_name:
                print(f"Channel '{channel_name}' found.")
                return channel["id"]
        print(f"Channel '{channel_name}' not found.")
        return ""
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        return ""

# Send to Gemini for summarization or question answering
def send_to_gemini(conversation: str, prompt: str):
    payload = {
        "contents": [{"parts": [{"text": f"{prompt}\n{conversation}"}]}],
    }
    try:
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            data = response.json()
            if "candidates" in data and len(data["candidates"]) > 0:
                summary = data["candidates"][0]["content"]["parts"][0]["text"]
                print("Response:", summary)
            else:
                print("No response generated by Gemini.")
        else:
            print("Error from Gemini API:", response.text)
    except requests.RequestException as e:
        print(f"Error sending data to Gemini API: {e}")

# Main execution
if __name__ == "__main__":
    if not slack_token:
        print("Error: SLACK_API environment variable not set.")
    else:
        channel_name = input("Enter Slack channel name: ")
        channel_id = get_channel_id_by_name(channel_name)
        if channel_id:
            conversation = fetch_slack_conversation(channel_id)
            full_text = "\n".join(conversation)

            if full_text.strip():  # Check if there's content to summarize
                print(f"Input text length (characters): {len(full_text)}")
                user_question = input(
                    "Enter your question about the channel (or press Enter for default summary): "
                ).strip()

                prompt = user_question if user_question else (
                    "Create a detailed summary of what was discussed in this channel, including incident timelines, "
                    "mitigation steps, resolution details, and identified action items."
                )

                print("Sending data to Gemini for analysis...")
                send_to_gemini(full_text, prompt)
            else:
                print("No messages to analyze.")
        else:
            print("Invalid channel name or not authorized.")
